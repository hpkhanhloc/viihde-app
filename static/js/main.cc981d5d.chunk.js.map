{"version":3,"sources":["components/Videos.js","components/Video.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Videos","props","videos","map","video","Grid","celled","key","id","Row","Column","width","Image","src","thumb","to","title","description","subtitle","Button","primary","Video","state","this","initPlayer","videoElement","document","querySelector","player","RxPlayer","addEventListener","err","console","log","onclick","pause","play","loadVideo","url","sources","transport","autoPlay","controls","Component","Home","href","App","useState","padding","Container","basename","process","Menu","inverted","Item","link","style","exact","path","render","match","params","find","Number","className","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc981d5d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Grid, Image, Button } from 'semantic-ui-react'\r\n\r\nconst Videos = (props) => {\r\n    return (\r\n      <div>\r\n        <h1>Videos</h1>\r\n        {props.videos.map(video => (\r\n          <Grid celled key={video.id}>\r\n            <Grid.Row>\r\n              <Grid.Column width={4}>\r\n                <Image src={video.thumb} />\r\n              </Grid.Column>\r\n              <Grid.Column width={12}>\r\n                <h2>\r\n                  <Link to={`/videos/${video.id}`}>\r\n                    {video.title}\r\n                  </Link>\r\n                </h2>\r\n                <p>{video.description}</p>\r\n                <p>{video.subtitle}</p>\r\n                <Link to={`/videos/${video.id}`}>\r\n                  <Button primary>Play</Button>\r\n                </Link>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Videos","import React, { Component } from 'react'\r\nimport RxPlayer from 'rx-player'\r\n\r\nclass Video extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initPlayer()\r\n    }\r\n\r\n    initPlayer() {\r\n        const videoElement = document.querySelector(\"video\");\r\n\r\n        const player = new RxPlayer({ videoElement });\r\n        \r\n        player.addEventListener(\"error\", err => {\r\n            console.log(\"the content stopped with the following error\", err);\r\n        });\r\n\r\n        player.addEventListener(\"playerStateChange\", state => {\r\n            if (state === \"LOADED\") {\r\n                console.log(\"the content is loaded\")\r\n\r\n            // toggle between play and pause when the user clicks on the video\r\n                videoElement.onclick = function() {\r\n                    if (state === \"PLAYING\") {\r\n                        player.pause();\r\n                    } else if (state === 'PAUSED') {\r\n                        player.play();\r\n                    }\r\n                };\r\n            }\r\n        })\r\n\r\n        player.loadVideo({\r\n            url: `${this.props.video.sources}`,\r\n            transport: \"smooth\",\r\n            autoPlay: true,\r\n        })\r\n        }\r\n    \r\n    render() {\r\n        return (\r\n          <div>\r\n            <h1>{this.props.video.title}</h1>\r\n            <div>\r\n              <video id=\"video\" controls ></video>\r\n            </div>\r\n          </div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default Video","import React from 'react'\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Mini Viihde app</h1>\r\n    <h2>Summarise</h2>\r\n    <ul>\r\n      <li>\r\n        Hard code video data, the link to source media by{\" \"}\r\n        <a href=\"http://playready.azurewebsites.net/Home/AmsSamples\">\r\n          http://playready.azurewebsites.net/Home/AmsSamples\r\n        </a>\r\n      </li>\r\n      <li>\r\n          Direct access the video by the link /video/:id\r\n      </li>\r\n      <li>\r\n        Web player librarie by Rx-Player{\" \"}\r\n        <a href=\"https://github.com/canalplus/rx-player\">\r\n          https://github.com/canalplus/rx-player\r\n        </a>\r\n      </li>\r\n      <li>\r\n          Simple UI by Semantic-UI.\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Home","import React, { useState } from 'react';\nimport { BrowserRouter as Router,\n         Route, Link} from 'react-router-dom'\nimport { Container, Menu } from 'semantic-ui-react'\nimport Videos from './components/Videos'\nimport Video from './components/Video'\nimport Home from './components/Home'\n\nconst App = () => {\n\n  // setVideos might be used later to add/edit video list\n  const [videos, setVideos] = useState([\n    {\n      id: 1,\n      description:\n        \"Big Buck Bunny tells the story of a giant rabbit with a heart bigger than himself. When one sunny day three rodents rudely harass him, something snaps... and the rabbit ain't no bunny anymore! In the typical cartoon tradition he prepares the nasty rodents a comical revenge.\\n\\nLicensed under the Creative Commons Attribution license\\nhttp://www.bigbuckbunny.org\",\n      sources:\n        \"https://amssamples.streaming.mediaservices.windows.net/683f7e47-bd83-4427-b0a3-26a6c4547782/BigBuckBunny.ism/manifest\",\n      subtitle: \"By Blender Foundation\",\n      thumb:\n        \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/images/BigBuckBunny.jpg\",\n      title: \"Big Buck Bunny\"\n    },\n  ]);\n\n  const videoById = (id) => videos.find(video => video.id === Number(id))\n\n  const padding = { padding: 5 }\n\n  return (\n    <Container>\n      <div>\n        <Router basename={process.env.PUBLIC_URL}>\n          <div>\n            <Menu inverted>\n              <Menu.Item link>\n                <Link style={padding} to=\"/\">\n                  Home\n                </Link>\n              </Menu.Item>\n              <Menu.Item link>\n                <Link style={padding} to=\"/videos\">\n                  Videos\n                </Link>\n              </Menu.Item>\n            </Menu>\n          </div>\n          <Route\n            exact path=\"/\"\n            render={() => <Home />}\n          />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + \"/videos\"}\n            render={() => <Videos videos={videos} />}\n          />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + \"/videos/:id\"}\n            render={({ match }) => <Video video={videoById(match.params.id)} />}\n          />\n        </Router>\n        <div className=\"footer\">\n          <br />\n          <em>\n            <p>\n              By Loc Hoang. See{\" \"}\n              <a href=\"https://github.com/hpkhanhloc/viihde-app\">\n                https://github.com/hpkhanhloc/viihde-app\n              </a>{\" \"}\n              for source code.\n            </p>\n          </em>\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}